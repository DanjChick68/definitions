# Canadian holiday definitions for the Ruby Holiday gem.
# Updated 2016-04-29.
#
# Notes:
#  - 'Family Day' in various provinces are only celebrated after certain years: http://www.timeanddate.com/holidays/canada/family-day
---
months:
  0:
  - name: Good Friday
    regions: [ca]
    function: easter(year)
    function_modifier: -2
  - name: Easter Sunday
    regions: [ca]
    function: easter(year)
    type: informal
  - name: Easter Monday
    regions: [ca]
    function: easter(year)
    function_modifier: 1
    type: informal
  1:
  - name: New Year's Day
    regions: [ca]
    mday: 1
    observed: to_monday_if_weekend(date)
  - name: New Year's
    regions: [ca_qc]
    mday: 2
  2:
  - name: Family Day
    regions: [ca_ab]
    wday: 1
    week: 3
    year_ranges:
    - after: 1990
  - name: Family Day
    regions: [ca_sk]
    wday: 1
    week: 3
    year_ranges:
    - after: 2007
  - name: Family Day
    regions: [ca_on]
    wday: 1
    week: 3
    year_ranges:
    - after: 2008
  - name: Family Day
    regions: [ca_bc]
    wday: 1
    week: 2
    year_ranges:
    - after: 2013
  - name: Louis Riel Day
    regions: [ca_mb]
    wday: 1
    week: 3
  - name: Nova Scotia Heritage Day
    regions: [ca_ns]
    wday: 1
    week: 3
    year_ranges:
    - after: 2015
  - name: Islander Day
    regions: [ca_pe]
    wday: 1
    week: 3
  3:
  - name: St. Patrick's Day
    regions: [ca_nl]
    mday: 17
  3:
  - name: St. George's Day
    regions: [ca_nl]
    mday: 23
  5:
  - name: Victoria Day
    regions: [ca_ab, ca_bc, ca_mb, ca_nt, ca_nu, ca_on, ca_sk, ca_yt]
    function: ca_victoria_day(year)
  - name: National Patriotes Day
    regions: [ca_qc]
    function: ca_victoria_day(year)
  6:
  - name: Discovery Day
    regions: [ca_nl]
    mday: 24
  - name: FÃªte Nationale
    regions: [ca_qc]
    mday: 24
  - name: National Aboriginal Day
    regions: [ca_nt]
    mday: 21
  7:
  - name: Canada Day
    regions: [ca]
    mday: 1
    observed: to_monday_if_weekend(date)
  - name: Orangemen's Day
    regions: [ca_nl]
    mday: 12
  - name: Nunavut Day
    regions: [ca_nu]
    mday: 9
  8:
  - name: B.C. Day
    week: 1
    regions: [ca_bc]
    wday: 1
  - name: Saskatchewan Day
    week: 1
    regions: [ca_sk]
    wday: 1
  - name: Heritage Day
    week: 1
    regions: [ca_ab]
    wday: 1
  - name: Natal Day
    week: 1
    regions: [ca_ns]
    wday: 1
  - name: Civic Holiday
    week: 1
    regions: [ca_nt, ca_nu, ca_pe]
    wday: 1
  - name: Civic Holiday
    week: 1
    regions: [ca_on]
    wday: 1
    type: informal
  - name: New Brunswick Day
    week: 1
    regions: [ca_nb]
    wday: 1
  - name: Discovery Day
    week: 3
    regions: [ca_yt]
    wday: 1
  9:
  - name: Labour Day
    week: 1
    regions: [ca]
    wday: 1
  10:
  - name: Thanksgiving
    week: 2
    regions: [ca_ab, ca_bc, ca_mb, ca_nt, ca_nu, ca_on, ca_sk, ca_yt]
    wday: 1
  11:
  - name: Remembrance Day
    regions: [ca_ab, ca_sk, ca_bc, ca_pe, ca_nl, ca_nt, ca_nu, ca_nb, ca_yt]
    mday: 11
    observed: to_monday_if_weekend(date)
  12:
  - name: Christmas Day
    regions: [ca]
    mday: 25
    observed: to_monday_if_weekend(date)
  - name: Boxing Day
    regions: [ca_on]
    mday: 26
    observed: to_weekday_if_boxing_weekend(date)
  - name: Boxing Day
    regions: [ca_ab, ca_bc, ca_mb, ca_nb, ca_nl, ca_nt, ca_ns, ca_nu, ca_pe, ca_sk, ca_yt]
    mday: 26
    observed: to_weekday_if_boxing_weekend(date)
    type: informal
methods:
  ca_victoria_day:
    # Monday on or before May 24
    arguments: year
    source: |
      date = Date.civil(year,5,24)
      if date.wday > 1
        date -= (date.wday - 1)
      elsif date.wday == 0
        date -= 6
      end
      date
tests: |
    {Date.civil(2008,1,1) => 'New Year\'s Day',
     Date.civil(2008,3,21) => 'Good Friday',
     Date.civil(2013,3,31) => 'Easter Sunday',
     Date.civil(2008,3,24) => 'Easter Monday',
     Date.civil(2008,7,1) => 'Canada Day',
     Date.civil(2008,9,1) => 'Labour Day',
     Date.civil(2008,12,25) => 'Christmas Day'}.each do |date, name|
      assert_equal name, (Holidays.on(date, :ca, :informal)[0] || {})[:name]
    end

    # Family Day in Alberta - Should only be active on 1990 or later
    [
      Date.civil(1990,2,19),
      Date.civil(2013,2,18),
      Date.civil(2014,2,17),
      Date.civil(2044,2,15),
    ].each do |date|
      assert_equal 'Family Day', Holidays.on(date, :ca_ab)[0][:name]
    end

    # Family Day in Alberta - should not be active before 1990
    [
      Date.civil(1970,2,16),
      Date.civil(1988,2,15),
      Date.civil(1989,2,20),
    ].each do |date|
      assert_equal [], Holidays.on(date, :ca_ab)
    end

    # Family Day in Saskatchewan - Should only be active on 2007 or later
    [
      Date.civil(2007,2,19),
      Date.civil(2013,2,18),
      Date.civil(2014,2,17),
      Date.civil(2044,2,15),
    ].each do |date|
      assert_equal 'Family Day', Holidays.on(date, :ca_sk)[0][:name]
    end

    # Family Day in Saskatchewan - should not be active before 2007
    [
      Date.civil(1970,2,16),
      Date.civil(1988,2,15),
      Date.civil(1989,2,20),
      Date.civil(2006,2,20),
    ].each do |date|
      assert_equal [], Holidays.on(date, :ca_sk)
    end

    # Family Day in Ontario - Should only be active on 2008 or later
    [
      Date.civil(2008,2,18),
      Date.civil(2013,2,18),
      Date.civil(2014,2,17),
      Date.civil(2044,2,15),
    ].each do |date|
      assert_equal 'Family Day', Holidays.on(date, :ca_on)[0][:name]
    end

    # Family Day in Ontario - should not be active before 2008
    [
      Date.civil(1970,2,16),
      Date.civil(1988,2,15),
      Date.civil(1989,2,20),
      Date.civil(2006,2,20),
      Date.civil(2007,2,19),
    ].each do |date|
      assert_equal [], Holidays.on(date, :ca_on)
    end

    # Family Day in BC - Should only be active on 2013 or later
    [
      Date.civil(2013,2,11),
      Date.civil(2014,2,10),
      Date.civil(2044,2,8),
    ].each do |date|
      assert_equal 'Family Day', Holidays.on(date, :ca_bc)[0][:name]
    end

    # Family Day in BC - should not be active before 2013
    [
      Date.civil(2000,2,14),
      Date.civil(2011,2,14),
      Date.civil(2012,2,13),
    ].each do |date|
      assert_equal [], Holidays.on(date, :ca_bc)
    end

    # Nova Scotia Heritage Day - should only be active on 2015 and later
    [
      Date.civil(2015,2,16),
      Date.civil(2016,2,15),
      Date.civil(2017,2,20),
      Date.civil(2044,2,15),
    ].each do |date|
      assert_equal 'Nova Scotia Heritage Day', Holidays.on(date, :ca_ns)[0][:name]
    end

    # Nova Scotia Heritage Day - should not be active before 2015
    [
      Date.civil(2000,2,21),
      Date.civil(2012,2,20),
      Date.civil(2013,2,18),
      Date.civil(2014,2,17),
    ].each do |date|
      assert_equal [], Holidays.on(date, :ca_ns)
    end

    # Islander Day in PE
    [ Date.civil(2013,2,18), Date.civil(2014,2,17) ].each do |date|
      assert_equal 'Islander Day', Holidays.on(date, :ca_pe)[0][:name]
    end


    # Victoria Day
    [:ca_ab, :ca_bc, :ca_mb, :ca_nt, :ca_nu, :ca_on, :ca_sk, :ca_yt].each do |r|
      [
        Date.civil(2004,5,24), Date.civil(2005,5,23), Date.civil(2006,5,22),
        Date.civil(2007,5,21), Date.civil(2008,5,19)
      ].each do |date|
        assert_equal 'Victoria Day', Holidays.on(date, r)[0][:name]
      end
    end

    # First Monday in August
    [Date.civil(2013,8,5), Date.civil(2014,8,4), Date.civil(2015,8,3)].each do |date|
      { :ca_bc => 'B.C. Day',
        :ca_sk => 'Saskatchewan Day',
        :ca_ab => 'Heritage Day',
        :ca_ns => 'Natal Day',
        :ca_nt => 'Civic Holiday',
        :ca_nu => 'Civic Holiday',
        :ca_pe => 'Civic Holiday',
        :ca_nb => 'New Brunswick Day'
      }.each do |region, name|
        assert_equal name, Holidays.on(date, region)[0][:name]
      end
    end

    # Civic Holiday is only by convention in :ca_on
    [Date.civil(2013,8,5), Date.civil(2014,8,4), Date.civil(2015,8,3)].each do |date|
      assert_equal 'Civic Holiday', Holidays.on(date, :ca_on, :informal)[0][:name]
    end

    # Remembrance Day in all Canadian provinces
    # except (Nova Scotia, Manitoba, Ontario, and Quebec)
    [
      :ca_ab,
      :ca_sk,
      :ca_bc,
      :ca_pe,
      :ca_nl,
      :ca_nt,
      :ca_nu,
      :ca_nb,
      :ca_yt
    ].each do |province|
      # Remembrance Day observed
      [Date.civil(2010, 11, 11), Date.civil(2012, 11, 12), Date.civil(2017, 11, 13)].each do |date|
        assert_equal 'Remembrance Day', Holidays.on(date, province, :observed)[0][:name]
      end

      # Remembrance Day
      assert_equal "Remembrance Day", Holidays.on(Date.civil(2016,11,11), province)[0][:name]
    end

    # New years observed date
    [Date.civil(2011, 1, 3), Date.civil(2012, 1, 2), Date.civil(2016, 1, 1)].each do |date|
      assert_equal 'New Year\'s Day', Holidays.on(date, :ca, :observed)[0][:name]
    end

    # Canada Day observed date
    [Date.civil(2011, 7, 1), Date.civil(2012, 7, 2), Date.civil(2017, 7, 3)].each do |date|
      assert_equal 'Canada Day', Holidays.on(date, :ca, :observed)[0][:name]
    end

    # Christmas observed date
    [Date.civil(2010, 12, 27), Date.civil(2012, 12, 25), Date.civil(2016, 12, 26)].each do |date|
      assert_equal 'Christmas Day', Holidays.on(date, :ca, :observed)[0][:name]
    end

    # Boxing Day observed date
    [Date.civil(2010, 12, 28), Date.civil(2012, 12, 26), Date.civil(2016, 12, 27),
     Date.civil(2015, 12, 28)].each do |date|
      assert_equal 'Boxing Day', Holidays.on(date, :ca_on, :observed)[0][:name]
    end
